let originalImage = null;
const originalCanvas = document.getElementById('originalCanvas');
const processedCanvas = document.getElementById('processedCanvas');
const fileInput = document.getElementById('fileInput');


fileInput.addEventListener('change', handleImageUpload);


function handleImageUpload(e) {
    const file = e.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(event) {
            originalImage = new Image();
            originalImage.onload = function() {
                drawOriginalImage();
            };
            originalImage.src = event.target.result;
        };
        reader.readAsDataURL(file);
    }
}


function drawOriginalImage() {
    
    originalCanvas.width = originalImage.width;
    originalCanvas.height = originalImage.height;
    processedCanvas.width = originalImage.width;
    processedCanvas.height = originalImage.height;

  
    const originalCtx = originalCanvas.getContext('2d');
    originalCtx.drawImage(originalImage, 0, 0);
}


function applyGrayscale() {
    if (!originalImage) {
        alert('Please upload an image first!');
        return;
    }

    const originalCtx = originalCanvas.getContext('2d');
    const processedCtx = processedCanvas.getContext('2d');
    

    const imageData = originalCtx.getImageData(0, 0, originalCanvas.width, originalCanvas.height);
    const data = imageData.data;


    for (let i = 0; i < data.length; i += 4) {
      
        const gray = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];
        
       
        data[i] = gray;     // Red
        data[i + 1] = gray; // Green
        data[i + 2] = gray; // Blue
       
    }


    processedCtx.putImageData(imageData, 0, 0);
}


function applyBlur() {
    if (!originalImage) {
        alert('Please upload an image first!');
        return;
    }

    const originalCtx = originalCanvas.getContext('2d');
    const processedCtx = processedCanvas.getContext('2d');
    
    const imageData = originalCtx.getImageData(0, 0, originalCanvas.width, originalCanvas.height);
    const data = imageData.data;
    const width = originalCanvas.width;
    const height = originalCanvas.height;
    
    const originalData = new Uint8ClampedArray(data);
    
    const kernelSize = 3;
    const halfKernel = Math.floor(kernelSize / 2);

  
    for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
            let sumR = 0, sumG = 0, sumB = 0;
            let count = 0;

          
            for (let ky = -halfKernel; ky <= halfKernel; ky++) {
                for (let kx = -halfKernel; kx <= halfKernel; kx++) {
                    const px = x + kx;
                    const py = y + ky;

                    if (px >= 0 && px < width && py >= 0 && py < height) {
                        const i = (py * width + px) * 4;
                        sumR += originalData[i];
                        sumG += originalData[i + 1];
                        sumB += originalData[i + 2];
                        count++;
                    }
                }
            }

            const i = (y * width + x) * 4;
            data[i] = sumR / count;
            data[i + 1] = sumG / count;
            data[i + 2] = sumB / count;
        }
    }

    processedCtx.putImageData(imageData, 0, 0);
}

function handleError(message) {
    alert(message);
    console.error(message);
}