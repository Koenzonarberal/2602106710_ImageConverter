<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Converter</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .upload-container {
            text-align: center;
            padding: 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .button-container {
            margin: 20px 0;
        }
        button {
            padding: 10px 20px;
            margin: 0 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #45a049;
        }
        .result-container {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .image-container {
            flex: 1;
            margin: 0 10px;
            text-align: center;
        }
        canvas {
            max-width: 100%;
            height: auto;
            margin-top: 10px;
        }
        #fileInput {
            display: none;
        }
        .upload-btn {
            background-color: #2196F3;
            color: white;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            display: inline-block;
        }
        .upload-btn:hover {
            background-color: #1976D2;
        }
    </style>
</head>
<body>
    <div class="upload-container">
        <h1>Image Converter</h1>
        <input type="file" id="fileInput" accept="image/*">
        <label for="fileInput" class="upload-btn">Choose Image</label>
        <div class="button-container">
            <button onclick="applyGrayscale()">Convert to Grayscale</button>
            <button onclick="applyBlur()">Apply Blur</button>
        </div>
    </div>

    <div class="result-container">
        <div class="image-container">
            <h3>Original Image</h3>
            <canvas id="originalCanvas"></canvas>
        </div>
        <div class="image-container">
            <h3>Processed Image</h3>
            <canvas id="processedCanvas"></canvas>
        </div>
    </div>

    <script>
        let originalImage = null;
        const originalCanvas = document.getElementById('originalCanvas');
        const processedCanvas = document.getElementById('processedCanvas');
        const fileInput = document.getElementById('fileInput');

        fileInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    originalImage = new Image();
                    originalImage.onload = function() {
                        drawOriginalImage();
                    };
                    originalImage.src = event.target.result;
                };
                reader.readAsDataURL(file);
            }
        });

        function drawOriginalImage() {
            originalCanvas.width = originalImage.width;
            originalCanvas.height = originalImage.height;
            processedCanvas.width = originalImage.width;
            processedCanvas.height = originalImage.height;

            const originalCtx = originalCanvas.getContext('2d');
            originalCtx.drawImage(originalImage, 0, 0);
        }

        function applyGrayscale() {
            if (!originalImage) return;

            const originalCtx = originalCanvas.getContext('2d');
            const processedCtx = processedCanvas.getContext('2d');
            
            // Get image data
            const imageData = originalCtx.getImageData(0, 0, originalCanvas.width, originalCanvas.height);
            const data = imageData.data;

            // Process each pixel
            for (let i = 0; i < data.length; i += 4) {
                // Calculate grayscale value using luminosity method
                const gray = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];
                data[i] = gray;     // Red
                data[i + 1] = gray; // Green
                data[i + 2] = gray; // Blue
                // Alpha channel (data[i + 3]) remains unchanged
            }

            processedCtx.putImageData(imageData, 0, 0);
        }

        function applyBlur() {
            if (!originalImage) return;

            const originalCtx = originalCanvas.getContext('2d');
            const processedCtx = processedCanvas.getContext('2d');
            
            // Get image data
            const imageData = originalCtx.getImageData(0, 0, originalCanvas.width, originalCanvas.height);
            const data = imageData.data;
            const width = originalCanvas.width;
            const height = originalCanvas.height;
            
            // Create a copy of the original data
            const originalData = new Uint8ClampedArray(data);
            
            // Kernel size for blur (3x3)
            const kernelSize = 3;
            const halfKernel = Math.floor(kernelSize / 2);

            // Process each pixel
            for (let y = 0; y < height; y++) {
                for (let x = 0; x < width; x++) {
                    let sumR = 0, sumG = 0, sumB = 0;
                    let count = 0;

                    // Apply kernel
                    for (let ky = -halfKernel; ky <= halfKernel; ky++) {
                        for (let kx = -halfKernel; kx <= halfKernel; kx++) {
                            const px = x + kx;
                            const py = y + ky;

                            if (px >= 0 && px < width && py >= 0 && py < height) {
                                const i = (py * width + px) * 4;
                                sumR += originalData[i];
                                sumG += originalData[i + 1];
                                sumB += originalData[i + 2];
                                count++;
                            }
                        }
                    }

                    // Calculate average and set pixel values
                    const i = (y * width + x) * 4;
                    data[i] = sumR / count;
                    data[i + 1] = sumG / count;
                    data[i + 2] = sumB / count;
                }
            }

            processedCtx.putImageData(imageData, 0, 0);
        }
    </script>
</body>
</html>